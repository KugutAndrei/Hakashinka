import os
import numpy as np
import sys
import subprocess
from xml.etree.ElementTree import Element, SubElement, ElementTree, tostring, XML, Comment, indent
import xml.etree.ElementTree as ET


def loadNet(filename):
    os.system('sumo -n ' + filename)

def loadRoute(filename):
    os.system('sumo -r ' + filename)
    
def loadConfig(filename, shell=False):
    sumo_process = subprocess.run(
        ['sumo', '-c', filename],
        check=False,
        shell=shell
    )


def generateConfigFile(
    config_filename, 
    net_filename, 
    route_filename, 
    output=['fcd', 'statistic', 'tripinfo', 'summary'],
    time=None
):
    name = config_filename.split('.')[-2].split('\\')[-1]
    
    top = Element('configuration', {
        'xmlns:xsi' : 'http://www.w3.org/2001/XMLSchema-instance',
        'xsi:noNamespaceSchemaLocation' : 'http://sumo.dlr.de/xsd/sumoConfiguration.xsd'
    })
    comm = Comment("Autogenerated in Artyom's code")
    top.append(comm)
    inp = SubElement(top, 'input')
    inp.extend([
        Element('net-file', value=net_filename),
        Element('route-files', value=route_filename)
    ])
    
    if type(output) == list and len(output) > 0:
        otp = SubElement(top, 'output')
        elems = []
        if 'fcd' in output:
            elems.append(Element('fcd-output', value=name+'.output.xml'))
        if 'statistic' in output:
            elems.append(
                Element('statistic-output', value=name+'.statistic.output.xml')
            )
        if 'tripinfo' in output:
            elems.append(
                Element('tripinfo-output', value=name+'.tripinfo.output.xml')
            )
        if 'summary' in output:
            elems.append(
                Element('summary-output', value=name+'.summary.output.xml')
            )
        otp.extend(elems)
    
    if time is not None:
        tm = SubElement(top, 'time')
        tm.extend([
            Element('begin', value="0"),
            Element('end', value=str(int(time)))
        ])
    
    tree = ElementTree(top)
    indent(tree, space="\t", level=0)
    tree.write(config_filename, encoding="utf-8", xml_declaration=True)


class RouteFile:
    
    def __init__(self, filename):
        self.filename = filename
        self.vTypes = dict()
        self.flows = dict()
        
    def setVehicleType(self, ID, params):
        self.vTypes[ID] = params
        
    def setVehicleFlow(self, vtype, source, dest, num, dur, speed):
        self.flows[len(self.flows)] = {
            'id' : vtype,
            'from' : source,
            'type' : vtype,
            'to' : dest,
            'begin' : "0",
            'end' : str(int(dur)),
            'number' : str(int(num)),
            'departSpeed' : str(float(speed)),
            'arrivalSpeed' : str(float(speed)),
            'departLane' : "random"#,
            #'probability' : str(prob)
        }
        
    def save(self):
        self.top = Element('routes', {
            'xmlns:xsi' : 'http://www.w3.org/2001/XMLSchema-instance',
            'xsi:noNamespaceSchemaLocation' : 'http://sumo.dlr.de/xsd/routes_file.xsd'
        })
        
        self.top.append(Comment("VTypes"))
        elems = []
        for ID, pars in self.vTypes.items():
            elems.append(Element('vType', {'id' : str(ID), **pars}))
        self.top.extend(elems)
        
        self.top.append(Comment("Flows"))
        elems = []
        for ID, pars in self.flows.items():
            elems.append(Element('flow', pars))
        self.top.extend(elems)
        
        self.tree = ElementTree(self.top)
        indent(self.tree, space="\t", level=0)
        self.tree.write(self.filename, encoding="utf-8", xml_declaration=True)
        
        
def readOutputFile(filename):
    filetype = filename.split('.')[-3]
    root = ET.parse(filename).getroot()
    
    if filetype == 'statistic':
        node = root.find('.//vehicleTripStatistics')
        if node is not None:
            return node.attrib
        else:
            node = root.find('.//performance')
            return node.attrib
#     elif filetype == 'summary':
        
#     elif filetype == 'tripinfo':
        
#     elif 